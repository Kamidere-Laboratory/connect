syntax = "proto3";

package minekube.connect.v1alpha1;

import "google/rpc/status.proto";

service WatchService {
  // Watch watches for session proposals for taking player connections.
  rpc Watch(stream WatchRequest) returns (stream WatchResponse);
}

message WatchRequest {
  // Sending this endpoint adds the server to the list
  // of multiplexed servers for this endpoint name.
  //
  // It is allowed to send other messages before this.
  //
  // If this is message is not sent the stream will
  // be closed serverside after a timeout.
  Endpoint endpoint = 1;

  // Sending this message rejects a session proposed by
  // the WatchService. This message should be sent
  // to inform the WatchService that the server will not try
  // to make a take the proposed session. The only purpose of
  // this message is to provide quicker feedback to the player
  // that he will not be connected with an optional localized
  // reason. See https://github.com/grpc/grpc/blob/master/src/proto/grpc/status/status.proto.
  // If the session is not rejected the watcher should establish
  // the connection for the proposed session.
  // If neither of these actions happen the proposal times out
  // out and the player receives a connection timeout error
  // indicating that the endpoint is currently unavailable.
  SessionRejection session_rejection = 2;
}

message WatchResponse {
  // The proposed session that intents to connect to the endpoint.
  Session session = 1;
}

message Endpoint {
  // It is the server name that players connect by.
  // If there are multiple equally named endpoints
  // player connections are multiplexed.
  string name = 1;

  // supported Minecraft protocol versions
  // version/user agent like paper or velocity
  // more...
}

message SessionRejection {
  // The id of the proposed session.
  string id = 1;
  // The optional reason why the proposed session was rejected.
  // To specify a user facing localized message refer to
  // https://github.com/grpc/grpc/blob/master/src/proto/grpc/status/status.proto
  google.rpc.Status reason = 2;
}

message Session {
  // The unique session id.
  string id = 1;
  // The address of the tunnel service to establish the connection.
  string tunnel_service_addr = 2;
  // The player that will be connected.
  Player player = 3;
}

message Player {
  // The profile of the player.
  GameProfile profile = 1;
  // The optional IP address of the player.
  // This field may be empty or is a fake address
  // generated for this particular player.
  string addr = 2;
}

message GameProfile {
  // The Minecraft UUID of the player.
  string id = 1;
  // The Minecraft name of the player.
  string name = 2;
  // The profile properties that may contain skin data and more.
  repeated GameProfileProperty properties = 3;
}

message GameProfileProperty {
  // The name of this property.
  string name = 1;
  // The value of this property
  string value = 2;
  // The signature of this property.
  string signature = 3;
}
